{"version":3,"sources":["components/Header.jsx","components/SearchBar.jsx","components/Rating.jsx","components/MovieCard.jsx","components/MovieList.jsx","components/AddMovie.jsx","components/MovieLibrary.jsx","data.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","SearchBar","createSelect","selectedGenre","onSelectedGenreChange","value","onChange","name","id","data-testid","filterMovie","this","props","searchText","onSearchTextChange","bookmarkedOnly","onBookmarkedChange","htmlFor","type","checked","defaultProps","Rating","rating","MovieCard","movie","title","subtitle","storyline","imagePath","alt","src","MovieList","movies","map","key","AddMovie","handleInput","target","setState","handleSelect","createInput","nameLabel","createTextArea","cols","rows","genre","handleClick","createButton","click","onClick","state","action","MovieLibrary","newCardMovie","oldMovies","filmes","filterGenre","filter","toUpperCase","includes","bookmarked","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3f299ed1.chunk.js","sourcesContent":["import React from 'react';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header className=\"movie-card-header\">\n        <h1 className=\"page-title\">Movie Cards Library</h1>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass SearchBar extends Component {\n  createSelect = (selectedGenre, onSelectedGenreChange) => (\n    <select\n      value={ selectedGenre }\n      onChange={ onSelectedGenreChange }\n      name=\"\"\n      id=\"selectedGenre\"\n      data-testid=\"select-input\"\n    >\n      <option data-testid=\"select-option\" value=\"\">Todos</option>\n      <option data-testid=\"select-option\" value=\"action\">Ação</option>\n      <option data-testid=\"select-option\" value=\"comedy\">Comédia</option>\n      <option data-testid=\"select-option\" value=\"thriller\">Suspense</option>\n    </select>\n  )\n\n  filterMovie = () => {\n\n  }\n\n  render() {\n    const { searchText,\n      onSearchTextChange,\n      bookmarkedOnly,\n      onBookmarkedChange,\n      selectedGenre,\n      onSelectedGenreChange,\n    } = this.props;\n    return (\n      <form data-testid=\"search-bar-form\" className=\"search-bar\">\n        <h6>Pesquisar filme:</h6>\n        <label htmlFor=\"text\" data-testid=\"text-input-label\">\n          Inclui o texto:\n          <input\n            id=\"text\"\n            value={ searchText }\n            onChange={ onSearchTextChange }\n            data-testid=\"text-input\"\n            type=\"text\"\n          />\n        </label>\n        <label htmlFor=\"checkbox\" data-testid=\"checkbox-input-label\">\n          <input\n            id=\"checkbox\"\n            type=\"checkbox\"\n            checked={ bookmarkedOnly }\n            onChange={ onBookmarkedChange }\n            data-testid=\"checkbox-input\"\n          />\n          Mostrar somente favoritos\n        </label>\n        <label htmlFor=\"genero\" data-testid=\"select-input-label\">\n          Filtrar por gênero\n          {this.createSelect(selectedGenre, onSelectedGenreChange)}\n        </label>\n      </form>\n    );\n  }\n}\n\nSearchBar.propTypes = {\n  searchText: PropTypes.string,\n  onSearchTextChange: PropTypes.func,\n  bookmarkedOnly: PropTypes.bool,\n  onBookmarkedChange: PropTypes.func,\n  selectedGenre: PropTypes.string,\n  onSelectedGenreChange: PropTypes.func,\n};\nSearchBar.defaultProps = {\n  searchText: '',\n  onSearchTextChange: () => {},\n  bookmarkedOnly: false,\n  onBookmarkedChange: () => {},\n  selectedGenre: '',\n  onSelectedGenreChange: () => {},\n};\n\nexport default SearchBar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Rating extends React.Component {\n  render() {\n    const { rating } = this.props;\n    return (\n      <div className=\"movie-card-rating\" data-testid=\"rating\">\n        <span className=\"rating\">{rating}</span>\n      </div>\n    );\n  }\n}\n\nRating.propTypes = { rating: PropTypes.number }.isRequired;\n\nRating.defaultProps = {\n  rating: 0,\n};\n\nexport default Rating;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Rating from './Rating';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const { title, subtitle, storyline, rating, imagePath } = movie;\n    return (\n      <div className=\"movie-card\" data-testid=\"movie-card\">\n        <img alt=\"Movie Cover\" className=\"movie-card-image\" src={ imagePath } />\n        <div className=\"movie-card-body\">\n          <h4 data-testid=\"movie-card-title\" className=\"movie-card-title\">{title}</h4>\n          <h5 className=\"movie-card-subtitle\">{subtitle}</h5>\n          <p className=\"movie-card-storyline\">{storyline}</p>\n        </div>\n        <Rating rating={ rating } />\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    storyline: PropTypes.string,\n    rating: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    imagePath: PropTypes.string,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport MovieCard from './MovieCard';\n\nclass MovieList extends React.Component {\n  render() {\n    const { movies } = this.props;\n\n    return (\n      <div data-testid=\"movie-list\" className=\"movie-list\">\n        { movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />) }\n      </div>\n    );\n  }\n}\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.object,\n  ).isRequired,\n};\n\nexport default MovieList;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass AddMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      subtitle: '',\n      title: '',\n      imagePath: '',\n      storyline: '',\n      rating: 0,\n      genre: 'action',\n    };\n  }\n\n  handleInput = ({ target: { value, id } }) => {\n    this.setState({ [id]: value });\n  }\n\n  handleSelect= ({ target: { value, id } }) => {\n    this.setState({ [id]: value });\n  }\n\n  createInput = (value, nameLabel, id, type) => (\n    <input\n      type={ type }\n      id={ id }\n      value={ value }\n      data-testid={ `${nameLabel}-input` }\n      onChange={ this.handleInput }\n    />\n  )\n\n  createTextArea = (storyline) => (\n    <textarea\n      data-testid=\"storyline-input\"\n      name=\"sinopse\"\n      id=\"storyline\"\n      className=\"storyline\"\n      value={ storyline }\n      onChange={ this.handleInput }\n      cols=\"30\"\n      rows=\"3\"\n    />\n  )\n\n  createSelect = (genre) => (\n    <select\n      id=\"genre\"\n      value={ genre }\n      data-testid=\"genre-input\"\n      onChange={ this.handleSelect }\n    >\n      <option data-testid=\"genre-option\" value=\"action\">Ação</option>\n      <option data-testid=\"genre-option\" value=\"comedy\">Comédia</option>\n      <option data-testid=\"genre-option\" value=\"thriller\">Suspense</option>\n    </select>\n  )\n\n  handleClick = () => {\n    this.setState({\n      subtitle: '',\n      title: '',\n      imagePath: '',\n      storyline: '',\n      rating: 0,\n      genre: 'action',\n    });\n  }\n\n  createButton = (click) => (\n    <button\n      type=\"button\"\n      id=\"btn\"\n      onClick={ () => {\n        click(this.state);\n        this.setState({\n          subtitle: '',\n          title: '',\n          imagePath: '',\n          storyline: '',\n          rating: 0,\n          genre: 'action',\n        });\n      } }\n      value=\"Adicionar filme\"\n      data-testid=\"send-button\"\n    >\n      Adicionar filme\n    </button>\n  )\n\n  render() {\n    const { subtitle, title, imagePath, rating, genre, storyline } = this.state;\n    const { onClick } = this.props;\n    return (\n      <form action=\"\" data-testid=\"add-movie-form\" className=\"add-movie\">\n        <div>\n          <label htmlFor=\"title\" data-testid=\"title-input-label\">\n            Título\n            {this.createInput(title, 'title', 'title', 'text')}\n          </label>\n          <label htmlFor=\"subTitle\" data-testid=\"subtitle-input-label\">\n            Subtítulo\n            {this.createInput(subtitle, 'subtitle', 'subtitle', 'text')}\n          </label>\n          <label htmlFor=\"img\" data-testid=\"image-input-label\">\n            Imagem\n            {this.createInput(imagePath, 'image', 'imagePath', 'text')}\n          </label>\n        </div>\n        <div>\n          <label htmlFor=\"sinopse\" data-testid=\"storyline-input-label\">\n            Sinopse\n            {this.createTextArea(storyline)}\n          </label>\n          <section>\n            <label htmlFor=\"rating\" data-testid=\"rating-input-label\">\n              Avaliação\n              {this.createInput(rating, 'rating', 'rating', 'number')}\n            </label>\n            <label htmlFor=\"select\" data-testid=\"genre-input-label\">\n              Gênero\n              {this.createSelect(genre)}\n            </label>\n          </section>\n        </div>\n        {this.createButton(onClick)}\n      </form>\n    );\n  }\n}\n\nAddMovie.propTypes = {\n  onClick: PropTypes.func,\n};\n\nAddMovie.defaultProps = {\n  onClick: () => {},\n};\n\nexport default AddMovie;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport SearchBar from './SearchBar';\nimport MovieList from './MovieList';\nimport AddMovie from './AddMovie';\n\nclass MovieLibrary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchText: '',\n      bookmarkedOnly: false,\n      selectedGenre: '',\n      movies: props.movies,\n    };\n  }\n\n  onBookmarkedChange = ({ target: { checked } }) => {\n    this.setState({ bookmarkedOnly: checked });\n  }\n\n  onSearchTextChange = ({ target: { value } }) => {\n    this.setState({ searchText: value });\n  }\n\n  onSelectedGenreChange = ({ target: { value } }) => {\n    this.setState({ selectedGenre: value });\n  }\n\n  newCardMovie = (movie) => {\n    this.setState((oldMovies) => ({ movies: [...oldMovies.movies, movie] }));\n  }\n\n  render() {\n    const { searchText, movies: filmes, bookmarkedOnly, selectedGenre } = this.state;\n\n    const filterText = filmes\n      .filter(({ title, subtitle, storyline }) => (\n        title.toUpperCase().includes(searchText.toUpperCase())\n      || subtitle.toUpperCase().includes(searchText.toUpperCase())\n      || storyline.toUpperCase().includes(searchText.toUpperCase())));\n\n    const filterMarked = filterText\n      .filter((movie) => ((bookmarkedOnly === false) ? true : movie.bookmarked));\n\n    const filterGenre = filterMarked\n      .filter((movie) => movie.genre.includes(selectedGenre));\n    return (\n      <div>\n        <SearchBar\n          searchText={ searchText }\n          onSearchTextChange={ this.onSearchTextChange }\n          bookmarkedOnly={ bookmarkedOnly }\n          onBookmarkedChange={ this.onBookmarkedChange }\n          selectedGenre={ selectedGenre }\n          onSelectedGenreChange={ this.onSelectedGenreChange }\n        />\n        <MovieList movies={ filterGenre } />\n        <AddMovie onClick={ this.newCardMovie } />\n      </div>\n    );\n  }\n}\n\nMovieLibrary.propTypes = {\n  movies: PropTypes.arrayOf(Object),\n};\n\nMovieLibrary.defaultProps = {\n  movies: [],\n};\n\nexport default MovieLibrary;\n","const movies = [\n  {\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport './App.css';\nimport MovieLibrary from './components/MovieLibrary';\nimport movies from './data';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <MovieLibrary movies={ movies } />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}